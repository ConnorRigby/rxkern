cmake_minimum_required(VERSION 3.0)

project(rxkern C ASM)

set(CPU_FLAGS "-mb -m2")
set(OPT_FLAGS "-Os -ffunction-sections")
set(ASM_OPTIONS "")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} \
                   -mb -m2 \
                   -Os \
                   -ffunction-sections \
                   -Wall -Wextra \
                   -Wformat \
                   -std=gnu11 \
				           -Wstrict-prototypes \
                   -Wsign-compare \
                   -Wredundant-decls \
                   -ffreestanding"
)

set(CMAKE_ASM_FLAGS "${CFLAGS} -x assembler-with-cpp")

add_link_options(-nostartfiles -Wl,-gc-sections)

# Add a custom command that produces version.c, plus
# a dummy output that's not actually produced, in order
# to force version.cmake to always be re-run before the build

add_custom_target(version_h BYPRODUCTS "${CMAKE_CURRENT_BINARY_DIR}/version.h"
	COMMAND ${CMAKE_COMMAND}
		-D SRCDIR="${CMAKE_CURRENT_SOURCE_DIR}"
		-P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/gitversion.cmake
)

set(SRC ${CMAKE_CURRENT_BINARY_DIR}/version.h main.c)

function(make_bin_file target)
  add_custom_command(
      TARGET ${target} POST_BUILD
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      BYPRODUCTS ${target}.bin
      COMMAND ${CMAKE_OBJCOPY} -O binary ${target} ${target}.bin
  )
endfunction()

function(show_object_size target)
  string(REPLACE "objcopy" "size" CMAKE_OBJSIZE "${CMAKE_OBJCOPY}")
  add_custom_command(
      TARGET ${target} POST_BUILD
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      COMMAND ${CMAKE_OBJSIZE} ${target}
  )
endfunction()

function(add_kernel TGTNAME)
	message(STATUS rxkern_${TGTNAME})
	target_compile_definitions(rxkern_${TGTNAME} PRIVATE PLATF=\"${TGTNAME}\")
	target_compile_definitions(rxkern_${TGTNAME} PRIVATE ${TGTNAME})
	target_include_directories(rxkern_${TGTNAME} PUBLIC ${PROJECT_BINARY_DIR})
  target_include_directories(rxkern_${TGTNAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)
	make_bin_file(rxkern_${TGTNAME})
	show_object_size(rxkern_${TGTNAME})
endfunction()

add_executable(rxkern_SH7055_18 ${SRC} platf_7055.c pl_flash_705x_180nm.c)
target_link_options(rxkern_SH7055_18 PRIVATE -T ${CMAKE_SOURCE_DIR}/ldscripts/lkr_subaru_7055_18.ld)
add_kernel(npk SH7055_18)
